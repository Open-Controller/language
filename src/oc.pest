/*
 Copyright (C) 2022 PJTSearch

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as
 published by the Free Software Foundation, either version 3 of the
 License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

WHITESPACE = _{ " " | "\n" | "\t" }
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }
char = { ASCII_ALPHANUMERIC | "_" }

// matches anything between 2 double quotes
double_quoted_string = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\""}
// matches anything between 2 single quotes
single_quoted_string = @{ "\'" ~ (!("\'") ~ ANY)* ~ "\'"}

string = @{
    double_quoted_string |
    single_quoted_string
}
int = @{ "-" ? ~ ("0" | '1'..'9' ~ '0'..'9' * ) }
float = @{
    "-" ? ~
    (
        "0" ~ "." ~ '0'..'9' + |
        '1'..'9' ~ '0'..'9' * ~ "." ~ '0'..'9' +
    )
}
bool = @{ "true" | "false" }

map_pair = { "@" ~ ident ~ expr }
map = { "{" ~ (map_pair)? ~ (map_pair)* ~ "}"}
list = { "[" ~ (expr)? ~ (expr)* ~ "]"}

xml_param = { ident ~ "=" ~ (("{" ~ expr ~ "}") | string) }
widget = { "<" ~ ident ~ (xml_param)* ~ ">" ~ (widget | "{" ~ expr ~ "}")* ~ "</" ~ ident ~ ">" }

struct_param = { ident ~ (expr | map | list) }

house = { "house" ~ "{" ~ (struct_param)+ ~ "}" }
room = { "room" ~ "{" ~ (struct_param)+ ~ "}" }
controller = { "controller" ~ "{" ~ (struct_param)+ ~ "}" }
display_interface = { "displayInterface" ~ "{" ~ (struct_param)+ ~ "}" }
device = { "device" ~ "{" ~ (struct_param)+ ~ "}" }

ident = @{ (char)+ | "+" | "-" | "*" | "/" | "%" | "$" | "=" | "<=" | ">=" | "!=" | "!" | ">" | "<" }
ref_expr = @{ ident }
lambda_args = { (ident)? ~ ("," ~ ident)* }
lambda = { "(" ~ lambda_args ~ ")" ~ "=>" ~ expr }
get_lambda_expr = { ref_expr | device | if_expr | call }
get_lambda = { get_lambda_expr ~ "." ~ ident }
index_expr = { ref_expr | if_expr | call }
index = { index_expr ~ "[" ~ expr ~ "]" ~ ("[" ~ expr ~ "]")* }
elif_expr = { "elif" ~ expr ~ "{" ~ expr ~ "}" }
if_expr = { "if" ~ expr ~ "{" ~ expr ~ "}" ~ (elif_expr)* ~ "else" ~ "{" ~ expr ~ "}" }
call = { "(" ~ (expr)+ ~ ")" }

expr = { widget | string | float | int | bool | lambda | house | room | controller | display_interface | device | index | get_lambda | if_expr | call | ref_expr }

import = { "import" ~ string ~ "as" ~ ident }
module = { SOI ~ (import)* ~ expr ~ EOI }